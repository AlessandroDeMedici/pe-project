[General]
network = CloudSystem

# Mapping local RNG to global RNG
num-rngs = 4
**.taskGenerator.rng-0 = 0
**.taskGenerator.rng-1 = 1
**.cloudNode.rng-0 = 2
**.backendServer.rng-0 = 3

sim-time-limit = 100000s
warmup-period = 0s

seed-set = ${repetition}

#**sink**.result-recording-modes = +vector, +vector(timeavg) #+vector(mean),+vector(timeavg)

[Config constantValuesTest1]
*.*_type = 0

*.T = 1s

*.N = 10
*.I = 1000
*.R = 1000
*.fairSharing = ${true, false}

*.S = 1s

*.p = 0.5

[Config constantValuesTest2]
*.*_type = 0
*.T = 1s

*.N = 10
*.I = 1000
*.R = 900
*.fairSharing = ${true, false}

*.S = 3s

*.p = 0.5

[Config constantValues1]
repeat = 1

*.*_type = 0

*.T = 1.7s

*.N = 7
*.I = 1900
*.R = 1500
*.fairSharing = ${false, true}

*.S = 1s

*.p = 0.5

[Config exponentialDistribution1]
repeat = 50

*.*_type = 1

*.T = 1.7s

*.N = 7
*.I = 1900
*.R = 1500
*.fairSharing = ${false, true}

*.S = 1s

*.p = 0.5


[Config verificationDegeneracyTest]
repeat = 5

*.*_type = 1

*.T = 1s

*.N = 10
*.I = 0.1
*.R = 100000
*.fairSharing = ${false, true}

*.S = 0.1s

*.p = 0.5

[Config monotonicityTest]
repeat = 1  # repetitions for each parameter combination

*.variable = ${variable=1..6}
*.range = ${range=1..100}

*.fairSharing = false
*.*_type = 0	


*.T = ${(${variable} == 1) ? ${range}s/100 + 1.01s : 1s}

*.N = ${(${variable} == 2) ? ${range}*2 : 10}
*.I = ${(${variable} == 3) ? ${range}*14 : 2000}
*.R = ${(${variable} == 4) ? ${range}*15 + 1980 : 2500} # 1500

*.S = ${(${variable} == 5) ? ${range}s/34.5 : 1s}

*.p = ${(${variable} == 6) ? ${range}/100 : 0.5}


[Config warmupPriod]
repeat = 10000  # repetitions for each parameter combination
sim-time-limit = 1000s
warmup-period = 0s

**sink**.result-recording-modes = +vector#, +vector(timeavg)
**cloudNode.cloudNodeStatActiveVM.result-recording-modes = +vector#, +vector(timeavg)
**backendServer.backendStatCPU.result-recording-modes = +vector#, +vector(timeavg)
#**cloudNode.cloudNodeStatNq.result-recording-modes = +vector, +vector(timeavg)
#**.result-recording-modes = +vector, +vector(timeavg)

*.fairSharing = ${fairSharing=false}
*.*_type = 1


*.T = 1s
*.N = 10
*.I = 2000
*.R = 2500
*.S = 1s
*.p = 0.5


[Config autocorrelation]
repeat = 1  # repetitions for each parameter combination
sim-time-limit = 1000000s
warmup-period = 400s

**sink**.result-recording-modes = +vector#, +vector(timeavg)
**cloudNode.cloudNodeStatActiveVM.result-recording-modes = +vector#, +vector(timeavg)
**backendServer.backendStatCPU.result-recording-modes = +vector#, +vector(timeavg)
#**cloudNode.cloudNodeStatNq.result-recording-modes = +vector, +vector(timeavg)
#**.result-recording-modes = +vector, +vector(timeavg)

*.fairSharing = ${fairSharing=false, true}
*.*_type = 0


*.T = 1s
*.N = ${N=10,100}
*.I = 2000
*.R = 2500
*.S = 1s
*.p = 0.5


[Config dataAnalysis]
repeat = 1  # repetitions for each parameter combination
sim-time-limit = 100000s
warmup-period = 400s



**sink**.result-recording-modes = +vector#, +vector(timeavg)
#**cloudNode.cloudNodeStatActiveVM.result-recording-modes = +vector#, +vector(timeavg)
#**backendServer.backendStatCPU.result-recording-modes = +vector#, +vector(timeavg)
**cloudNode.cloudNodeStatInterDepartureTime.result-recording-modes = +vector #, +vector(timeavg)
#**.result-recording-modes = +vector, +vector(timeavg)

**.cloudNode.fairSharing = ${fairSharing=false, true}
**.*DistributionType = ${distr=0,1}


**.taskGenerator.T = 1s
**.taskGenerator.I = 2000

**.cloudNode.R = 2500
**.cloudNode.N = ${N=1..100}
**.cloudNode.p = ${p=0.5}

**.backendServer.S = 1 Hz
